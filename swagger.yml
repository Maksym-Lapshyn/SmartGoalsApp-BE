swagger: '2.0'
info:
    description: 'Here you can find documentation for Smart Goals App API'
    version: 1.0.0
    title: 'Smart Goals App API Documentation'
    termsOfService: 'http://swagger.io/terms/'
    contact:
        email: maksym@gmail.com
    license:
        name: 'Apache 2.0'
        url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /api
tags:
    -   name: goals
        description: 'Everything about your goals'
        externalDocs:
            description: 'Find out more'
            url: 'http://swagger.io'
    -   name: milestones
        description: 'Everything about your milestones'
        externalDocs:
            description: 'Find out more'
            url: 'http://swagger.io'
    -   name: factors
        description: 'Everything about your factors'
        externalDocs:
            description: 'Find out more'
            url: 'http://swagger.io'
    -   name: contributors
        description: 'Everything about your contributors'
        externalDocs:
            description: 'Find out more'
            url: 'http://swagger.io'
paths:
    /goals:
        post:
            tags: [goals]
            summary: 'Create a goal'
            description: ""
            operationId: addgoal
            consumes: [application/json]
            produces: [application/json]
            parameters: [{in: body, name: body, description: 'New goal object', required: true, schema: {$ref: '#/definitions/Goal'}}]
            responses: {'201': {description: 'Goal created', schema: {$ref: '#/definitions/Goal'}}, '400': {description: 'Invalid input'}}
        get:
            tags: [goals]
            summary: 'Get all goals'
            description: ""
            operationId: getallgoals
            consumes: [application/json]
            produces: [application/json]
            responses: {'200': {description: 'Successful operation', schema: {type: array, items: {$ref: '#/definitions/Goal'}}}}
    /goals/{goalId}:
        get:
            tags: [goals]
            summary: 'Find a goal by id'
            description: 'Returns a single goal'
            operationId: getgoalbyid
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: number}]
            responses: {'200': {description: 'Successful operation', schema: {$ref: '#/definitions/Goal'}}, '404': {description: 'Goal not found'}}
        put:
            tags: [goals]
            summary: 'Update a goal'
            description: ""
            operationId: updategoal
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: number}, {in: body, name: body, description: 'Goal object with updated fields', required: true, schema: {$ref: '#/definitions/Goal'}}]
            responses: {'204': {description: 'Goal updated'}, '400': {description: 'Invalid input'}}
        delete:
            tags: [goals]
            summary: 'Delete a goal'
            description: ""
            operationId: deletegoal
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Goal id', required: true, type: number}]
            responses: {'204': {description: 'Goal deleted'}}
    /goals/{goalId}/milestones:
        post:
            tags: [milestones]
            summary: 'Create a milestone'
            description: ""
            operationId: addmilestone
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: number}, {in: body, name: body, description: 'New milestone object', required: true, schema: {$ref: '#/definitions/Milestone'}}]
            responses: {'201': {description: 'Milestone created', schema: {$ref: '#/definitions/Milestone'}}, '400': {description: 'Invalid input'}}
        get:
            tags: [milestones]
            summary: 'Get all milestones by goal'
            description: ""
            operationId: getallmilestonesbygoal
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: number}]
            responses: {'200': {description: 'Successful operation', schema: {type: array, items: {$ref: '#/definitions/Milestone'}}}}
    /goals/{goalId}/milestones/{milestoneId}:
        get:
            tags: [milestones]
            summary: 'Find a milestone by id'
            description: ''
            operationId: getmilestonebyid
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: number}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: number}]
            responses: {'200': {description: 'Successful operation', schema: {$ref: '#/definitions/Milestone'}}, '404': {description: 'Milestone not found'}}
    /milestones/{milestoneId}:
        put:
            tags: [milestones]
            summary: 'Update a milestone'
            description: ''
            operationId: updatedmilestone
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: number}, {in: body, name: body, description: 'Milestone object with updated fields', required: true, schema: {$ref: '#/definitions/Milestone'}}]
            responses: {'204': {description: 'Milestone updated'}, '400': {description: 'Invalid input'}}
        delete:
            tags: [milestones]
            summary: 'Delete a milestone'
            description: ''
            operationId: deletemilestone
            produces: [application/json]
            parameters: [{name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: number}]
            responses: {'204': {description: 'Milestone deleted'}}
    /goals/{goalId}/milestones/{milestoneId}/factors:
        post:
            tags: [factors]
            summary: 'Create a factor'
            description: ""
            operationId: addfactor
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: number}, {in: body, name: body, description: 'New factor object', required: true, schema: {$ref: '#/definitions/Factor'}}]
            responses: {'201': {description: 'Factor created', schema: {$ref: '#/definitions/Factor'}}, '400': {description: 'Invalid input'}}
        get:
            tags: [factors]
            summary: 'Get all factors by milestone'
            description: ""
            operationId: getallfactorsbymilestone
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}]
            responses: {'200': {description: 'Successful operation', schema: {type: array, items: {$ref: '#/definitions/Factor'}}}}
    /goals/{goalId}/milestones/{milestoneId}/factors/{id}:
        get:
            tags: [factors]
            summary: 'Find a factor by id'
            description: ''
            operationId: getfactorbyid
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: id, in: path, description: 'Existing factor id', required: true, type: string, format: string}]
            responses: {'200': {description: 'Successful operation', schema: {$ref: '#/definitions/Factor'}}, '404': {description: 'Factor not found'}}
        put:
            tags: [factors]
            summary: 'Update a factor'
            description: ""
            operationId: updatefactor
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: id, in: path, description: 'Existing factor id', required: true, type: string, format: string}, {in: body, name: body, description: 'Factor object with updated fields', required: true, schema: {$ref: '#/definitions/Factor'}}]
            responses: {'204': {description: 'Factor updated'}, '400': {description: 'Invalid input'}}
        delete:
            tags: [factors]
            summary: 'Delete a factor'
            description: ""
            operationId: deletefactor
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: id, in: path, description: 'Existing factor id', required: true, type: string, format: string}]
            responses: {'204': {description: 'Factor deleted'}}
    /goals/{goalId}/milestones/{milestoneId}/factors/{factorId}/contributors:
        post:
            tags: [contributors]
            summary: 'Create a contributor'
            description: ""
            operationId: addcontributor
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: factorId, in: path, description: 'Existing factor id', required: true, type: string, format: string}, {in: body, name: body, description: 'New contributor object', required: true, schema: {$ref: '#/definitions/Contributor'}}]
            responses: {'201': {description: 'Contributor created', schema: {$ref: '#/definitions/Contributor'}}, '400': {description: 'Invalid input'}}
        get:
            tags: [contributors]
            summary: 'Get all contributors by factor'
            description: ""
            operationId: getallcontributorsbyfactor
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: factorId, in: path, description: 'Existing factor id', required: true, type: string, format: string}]
            responses: {'200': {description: 'Successful operation', schema: {type: array, items: {$ref: '#/definitions/Contributor'}}}}
    /goals/{goalId}/milestones/{milestoneId}/factors/{factorId}/contributors/{id}:
        get:
            tags: [contributors]
            summary: 'Find a contributor by id'
            description: ''
            operationId: getcontributorbyid
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: factorId, in: path, description: 'Existing factor id', required: true, type: string, format: string}, {name: id, in: path, description: 'Existing contributor id', required: true, type: string, format: string}]
            responses: {'200': {description: 'Successful operation', schema: {$ref: '#/definitions/Contributor'}}, '404': {description: 'Contributor not found'}}
        put:
            tags: [contributors]
            summary: 'Update a contributor'
            description: ""
            operationId: updatecontributor
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: factorId, in: path, description: 'Existing factor id', required: true, type: string, format: string}, {name: id, in: path, description: 'Existing contributor id', required: true, type: string, format: string}, {in: body, name: body, description: 'Contributor object with updated fields', required: true, schema: {$ref: '#/definitions/Contributor'}}]
            responses: {'204': {description: 'Contributor updated'}, '400': {description: 'Invalid input'}}
        delete:
            tags: [contributors]
            summary: 'Delete a contributor'
            description: ""
            operationId: deletecontributor
            produces: [application/json]
            parameters: [{name: goalId, in: path, description: 'Existing goal id', required: true, type: string, format: string}, {name: milestoneId, in: path, description: 'Existing milestone id', required: true, type: string, format: string}, {name: factorId, in: path, description: 'Existing factor id', required: true, type: string, format: string}, {name: id, in: path, description: 'Existing contributor id', required: true, type: string, format: string}]
            responses: {'204': {description: 'Factor deleted'}}
definitions:
    Goal:
        type: object
        properties:
            id: {type: number, readOnly: true}
            name: {type: string, format: string}
            description: {type: string, format: string}
            startDate: {type: string, format: date-time}
            endDate: {type: string, format: date-time}
            tags: {type: array, items: {type: string}}
            milestones: {type: array, readOnly: true, items: {$ref: '#/definitions/Milestone'}}
    Milestone:
        type: object
        properties:
            id: {type: number, readOnly: true}
            goalId: {type: number, readOnly: true}
            name: {type: string, format: string}
            description: {type: string, format: string}
            plannedDate: {type: string, format: date-time}
            actualDate: {type: string, format: date-time}
            value: {type: number, minimum: 1, maximum: 10}
            factors: {type: array, readOnly: true, items: {$ref: '#/definitions/Factor'}}
    Factor:
        type: object
        properties:
            id: {type: number, readOnly: true}
            milestoneId: {type: number, readOnly: true}
            name: {type: string, format: string}
            description: {type: string, format: string}
            value: {type: number, minimum: 0, maximum: 10}
            weight: {type: number, minimum: 0, maximum: 10}
            contributors: {type: array, readOnly: true, items: {$ref: '#/definitions/Contributor'}}
    Contributor:
        type: object
        properties:
            id: {type: number, readOnly: true}
            factor: {type: number, readOnly: true}
            name: {type: string, format: string}
            description: {type: string, format: string}
externalDocs:
    description: 'Find out more about Swagger'
    url: 'http://swagger.io'